#!/bin/sh
#
# rc.devices - Device initialization script
#

#. /etc/init.d/functions

log_message() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" >> /var/log/init.log
}

mount_virtual_fs() {
    log_message "Mounting virtual filesystems"
    
    mount -t proc proc /proc || log_message "ERROR: Failed to mount proc"
    mount -t sysfs sysfs /sys || log_message "ERROR: Failed to mount sysfs"
    mount -t devtmpfs devtmpfs /dev || log_message "ERROR: Failed to mount devtmpfs"
    
    mkdir -p /dev/pts /dev/shm /run /var/run /tmp
    mount -t devpts devpts /dev/pts || log_message "ERROR: Failed to mount devpts"
    mount -t tmpfs tmpfs /dev/shm || log_message "ERROR: Failed to mount shm"
}

create_essential_devices() {
    log_message "Creating essential device nodes"
    
    # Character devices
    mknod /dev/null c 1 3
    mknod /dev/zero c 1 5
    mknod /dev/random c 1 8
    mknod /dev/urandom c 1 9
    mknod /dev/full c 1 7
    mknod /dev/kmem c 1 2
    mknod /dev/mem c 1 1
    mknod /dev/port c 1 4
    
    # Console and TTY devices
    mknod /dev/console c 5 1
    mknod /dev/tty c 5 0
    mknod /dev/tty0 c 4 0
    mknod /dev/tty1 c 4 1
    mknod /dev/tty2 c 4 2
    mknod /dev/tty3 c 4 3
    mknod /dev/tty4 c 4 4
    mknod /dev/tty5 c 4 5
    mknod /dev/tty6 c 4 6
    
    # PTY devices
    for i in 0 1 2 3 4 5 6 7 8 9; do
        mknod /dev/pts/$i c 136 $i
    done
    
    # Input devices
    mknod /dev/psaux c 10 1
    mknod /dev/mouse c 10 2
    mknod /dev/input/mice c 13 63
    mkdir -p /dev/input
    mknod /dev/input/event0 c 13 64
    mknod /dev/input/event1 c 13 65
    
    # RTC
    mknod /dev/rtc0 c 254 0
    
    # Audio (ALSA)
    mkdir -p /dev/snd
    mknod /dev/snd/controlC0 c 116 0
    mknod /dev/snd/pcmC0D0p c 116 16
    mknod /dev/snd/pcmC0D0c c 116 24
    mknod /dev/snd/seq c 116 1
    mknod /dev/snd/timer c 116 33
    
    # Create symlinks
    ln -sf /proc/self/fd /dev/fd
    ln -sf /proc/self/fd/0 /dev/stdin
    ln -sf /proc/self/fd/1 /dev/stdout
    ln -sf /proc/self/fd/2 /dev/stderr
}

create_block_devices() {
    log_message "Creating block device nodes"
    
    # SCSI disks
    for disk in a b c d e f g h; do
        mknod /dev/sd$disk b 8 $(( (16#61) + $(printf '%d' "'$disk") - $(printf '%d' "'a") ))
        for part in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15; do
            mknod /dev/sd${disk}${part} b 8 $(( $(( (16#61) + $(printf '%d' "'$disk") - $(printf '%d' "'a") )) * 16 + $part ))
        done
    done
    
    # Loop devices
    for i in 0 1 2 3 4 5 6 7; do
        mknod /dev/loop$i b 7 $i
    done
    
    # RAM disks
    for i in 0 1 2 3; do
        mknod /dev/ram$i b 1 $i
    done
    
    # Floppy
    mknod /dev/fd0 b 2 0
    
    # CD-ROM
    mknod /dev/cdrom b 11 0
    ln -sf /dev/cdrom /dev/dvd
    ln -sf /dev/cdrom /dev/cdrw
}

create_network_devices() {
    log_message "Creating network device nodes"
    
    # Network devices (created by kernel, but ensure they exist)
    for i in 0 1 2 3 4 5 6 7; do
        if [ ! -e /dev/eth$i ]; then
            mknod /dev/eth$i c 10 200
        fi
    done
}

load_kernel_modules() {
    log_message "Loading essential kernel modules"
    
    # Block devices
    modprobe loop || true
    modprobe ext4 || true
    modprobe fat || true
    modprobe vfat || true
    modprobe ntfs || true
    
    # Filesystems
    modprobe fuse || true
    modprobe nls_utf8 || true
    modprobe nls_cp437 || true
    
    # Input
    modprobe evdev || true
    modprobe usbhid || true
    
    # Other
    modprobe joydev || true
    modprobe uinput || true
}

apply_udev_rules() {
    log_message "Applying device permissions and rules"
    
    # Set permissions
    chmod 0666 /dev/null /dev/zero /dev/full
    chmod 0666 /dev/random /dev/urandom
    chmod 0622 /dev/console
    chmod 0666 /dev/tty*
    chmod 0666 /dev/pts/*
    chmod 0660 /dev/input/*
    chmod 0666 /dev/snd/*
    
    # Create groups and set ownership
    chown root:tty /dev/console
    chown root:tty /dev/tty*
    chown root:audio /dev/snd/*
    chown root:input /dev/input/*
    
    # Apply custom rules if exist
    if [ -d /etc/udev/rules.d ]; then
        for rule in /etc/udev/rules.d/*.rules; do
            if [ -f "$rule" ]; then
                log_message "Applying udev rule: $(basename $rule)"
                # Здесь можно добавить парсинг и применение правил
            fi
        done
    fi
}

start_device_daemon() {
    log_message "Starting device management daemon"
    
    # Запускаем простой демон для мониторинга hotplug
    if [ -x /sbin/mydevd ]; then
        /sbin/mydevd &
    fi
}

case "$1" in
    start)
        echo "Starting device initialization..."
        mount_virtual_fs
        create_essential_devices
        create_block_devices
        create_network_devices
        load_kernel_modules
        apply_udev_rules
        start_device_daemon
        echo "Device initialization complete"
        ;;
    stop)
        echo "Stopping device services..."
        # Останавливаем device daemon если есть
        pkill -f mydevd
        echo "Device services stopped"
        ;;
    restart)
        $0 stop
        sleep 1
        $0 start
        ;;
    *)
        echo "Usage: $0 {start|stop|restart}"
        exit 1
        ;;
esac

exit 0
